apiVersion: v1
kind: ConfigMap
metadata: # kpt-merge: /pktgen-host-netdevice-scripts-configmap
  name: pktgen-host-netdevice-scripts-configmap
  labels:
    release: firewall-host-netdevice
    app: pktgen-host-netdevice
    chart: pktgen-host-netdevice
  annotations:
    internal.kpt.dev/upstream-identifier: '|ConfigMap|default|pktgen-host-netdevice-scripts-configmap'
  namespace: fw
data:
  vpg_start.sh: "#!/bin/bash\n\n#update root ca (wr lab only)\napt-get update\n\necho 'Updte CA Cert'\nmkdir -p /usr/local/share/ca-certificates/extra\ncp /opt/rootCA.crt /usr/local/share/ca-certificates/extra/\nupdate-ca-certificates\napt install -y libnss3-tools\ncp /opt/ImportScript /root\nchmod a+x /root/ImportScript\n/root/ImportScript\n\napt-get update\napt-get install -y sudo curl net-tools iproute2 wget inetutils-ping vim\n\n#curl -s https://packagecloud.io/install/repositories/fdio/release/script.deb.sh | sudo bash\n\napt-get install -y gnupg\ncurl -k -L https://packagecloud.io/fdio/1901/gpgkey | sudo apt-key add -\n\ncat <<EOF > /etc/apt/sources.list.d/fdio_1901.list\ndeb https://packagecloud.io/fdio/1901/ubuntu/ bionic main\ndeb-src https://packagecloud.io/fdio/1901/ubuntu/ bionic main\nEOF\n\napt-get update\n\n#export VPP_VER=19.01.2-release\nexport VPP_VER=19.01.3-rc0~9-gbef25c30a~b79\napt-get install -y vpp=$VPP_VER vpp-lib=$VPP_VER\napt-get install -y vpp-plugins=$VPP_VER\n\nif [ -e /run/vpp/cli-vpp1.sock ]; then\n    rm /run/vpp/cli-vpp1.sock\nfi\n\napt-get install -y python3\n\npython3 /opt/vpgstarter.py\n\n# #\troot@vpktgen:/# taskset -p --cpu-list 1\n# #\tpid 1's current affinity list: 1,2,29\n\n# corelist=`taskset -p -c 1 |cut -d : -f 2 | sed 's/^ *//' | sed 's/ *$//'`\n# #extract master core\n# mastercoreidx=`echo $corelist | cut -d , -f 1`\n# #extract worker cores\n# workercorelist=`echo $corelist | sed -E 's/^[0-9]*,//'`\n\n# echo 'start... vpp'\n# vpp unix {cli-listen /run/vpp/cli-vpp1.sock} api-segment { prefix vpp1 } \\\n#     cpu { main-core $mastercoreidx  corelist-workers $workercorelist }\n\n# echo 'wait vpp be up ...'\n# while [ ! -e /run/vpp/cli-vpp1.sock ]; do\n#     sleep 1;\n# done\n\n# echo 'configure vpp ...'\n\n# ifconfig veth11 0.0.0.0\n# ifconfig veth11 down\n\n# HWADDR1=$(ifconfig veth11 |grep ether | tr -s ' ' | cut -d' ' -f 3)\n\n# vppctl -s /run/vpp/cli-vpp1.sock show ver\n# vppctl -s /run/vpp/cli-vpp1.sock show threads\n\n# vppctl -s /run/vpp/cli-vpp1.sock create host-interface name veth11 hw-addr $HWADDR1\n\n# vppctl -s /run/vpp/cli-vpp1.sock set int state host-veth11 up\n\n# vppctl -s /run/vpp/cli-vpp1.sock show int\n# vppctl -s /run/vpp/cli-vpp1.sock show hardware\n\n# vppctl -s /run/vpp/cli-vpp1.sock set int ip address host-veth11 10.10.1.2/24\n\n# vppctl -s /run/vpp/cli-vpp1.sock show int addr\n\n# vppctl -s /run/vpp/cli-vpp1.sock ip route add 10.10.2.0/24  via 10.10.1.1\n\n# vppctl -s /run/vpp/cli-vpp1.sock show ip fib\n\n# #vppctl -s /run/vpp/cli-vpp1.sock trace add af-packet-input 10\n\necho \"provision streams\"\n### pktgen config\nvppctl -s /run/vpp/cli-vpp1.sock loop create\nvppctl -s /run/vpp/cli-vpp1.sock set int ip address loop0 11.22.33.1/24\nvppctl -s /run/vpp/cli-vpp1.sock set int state loop0 up\n\ncd /opt\n\nmkdir /home/root\ncat <<EOF> /home/root/stream_fw_udp1_loop0\npacket-generator new {\n\t  name fw_udp1\n\t  rate 10\n\t  node ip4-input\n\t  size 64-64\n\t  no-recycle\n      interface loop0\n\t  data {\n\t\tUDP: 10.10.1.2 -> 10.10.2.2\n\t\tUDP: 15320 -> 8080\n\t\tlength 128 checksum 0 incrementing 1\n\t  }\n\t}\nEOF\n\nvppctl -s /run/vpp/cli-vpp1.sock  exec /home/root/stream_fw_udp1_loop0\n\n#vppctl -s /run/vpp/cli-vpp1.sock show packet-generator\n\n#vppctl -s /run/vpp/cli-vpp1.sock trace add pg-input 10\n\nvppctl -s /run/vpp/cli-vpp1.sock packet-generator enable\n\nvppctl -s /run/vpp/cli-vpp1.sock show packet-generator\n\nvppctl -s /run/vpp/cli-vpp1.sock show int\n\n#vppctl -s /run/vpp/cli-vpp1.sock packet-generator disable\n\n#vppctl -s /run/vpp/cli-vpp1.sock packet-generator delete fw_udp1\n\necho \"done\"\nsleep infinity"
  vpgstarter.py: "#!/usr/bin/python\r\n\r\nimport os\r\nimport subprocess\r\nfrom time import sleep\r\nimport time\r\n\r\ndef start_vpp(master_core, worker_cores):\r\n    print(\"start vpp, master %s, worker_cores: %s\" % (master_core,worker_cores))\r\n    subprocess.check_call(\r\n        \"vpp unix {cli-listen /run/vpp/cli-vpp1.sock} api-segment { prefix vpp1 } \\\r\n            cpu { main-core %s  corelist-workers %s }\" % (master_core, worker_cores), \r\n            shell=True)\r\n    while not os.path.exists(\"/run/vpp/cli-vpp1.sock\"):\r\n        print(\"waiting for vpp up ...\")\r\n        time.sleep(1)\r\n        pass\r\n    print(\"configure vpp ...\")\r\n\r\n    subprocess.check_call(\"ifconfig veth11 0.0.0.0\", shell=True)\r\n    subprocess.check_call(\"ifconfig veth11 down\", shell=True)\r\n\r\n    status1, HWADDR1= subprocess.getstatusoutput(\"ifconfig veth11 |grep ether | tr -s ' ' | cut -d' ' -f 3\")\r\n    if status1 != 0:\r\n        print(\"Failed to get HW Addr\")\r\n        exit(-1)\r\n    subprocess.check_call(\"vppctl -s /run/vpp/cli-vpp1.sock show ver\", shell=True)\r\n    subprocess.check_call(\"vppctl -s /run/vpp/cli-vpp1.sock show threads\", shell=True)\r\n    subprocess.check_call(\"vppctl -s /run/vpp/cli-vpp1.sock create host-interface name veth11 hw-addr %s\"%HWADDR1, shell=True)\r\n    subprocess.check_call(\"vppctl -s /run/vpp/cli-vpp1.sock set int state host-veth11 up\", shell=True)\r\n    subprocess.check_call(\"vppctl -s /run/vpp/cli-vpp1.sock set int ip address host-veth11 10.10.1.2/24\", shell=True)\r\n    subprocess.check_call(\"vppctl -s /run/vpp/cli-vpp1.sock show hardware\", shell=True)\r\n    subprocess.check_call(\"vppctl -s /run/vpp/cli-vpp1.sock show int\", shell=True)\r\n    subprocess.check_call(\"vppctl -s /run/vpp/cli-vpp1.sock show int addr\", shell=True)\r\n    subprocess.check_call(\"vppctl -s /run/vpp/cli-vpp1.sock ip route add 10.10.2.0/24  via 10.10.1.1\", shell=True)\r\n    subprocess.check_call(\"vppctl -s /run/vpp/cli-vpp1.sock show ip fib\", shell=True)\r\n\r\ndef extract_master_worker_cores():\r\n    status, coreliststr = subprocess.getstatusoutput(\r\n        \"taskset -p -c 1 |cut -d : -f 2 | sed 's/^ *//' | sed 's/ *$//'\")\r\n    print(\"coreliststr: %s\" % coreliststr)\r\n    corelist = cpu_list_decoder(coreliststr)\r\n    master_core = corelist[0] if len(corelist) > 0 else -1\r\n    worker_cores = corelist[1:] if len(corelist) > 1 else []\r\n    return master_core, worker_cores\r\n\r\ndef cpu_list_decoder(cpuliststr):\r\n    print(\"cpu list:\"+cpuliststr)\r\n    result = []\r\n    if cpuliststr == \"\":\r\n        return []\r\n    # split by ,\r\n    toplist = cpuliststr.split(',')\r\n    for ele in toplist:\r\n        if '-' not in ele:\r\n            result.append(int(ele))\r\n            continue\r\n\r\n        secondlist = ele.split('-')\r\n        start = int(secondlist[0])\r\n        end = int(secondlist[1])\r\n        while start <= end:\r\n            result.append(start)\r\n            start += 1\r\n    print(\"decoded: \"+ str(result))\r\n    return result\r\n\r\nmaster_core, worker_cores = extract_master_worker_cores()\r\nstart_vpp(master_core, worker_cores)\r\n\r\n# if __name__ == \"__main__\":\r\n#     print ('This is main of module \"cpu-list-decoder.py\"')\r\n#     cpu_list_decoder(\"3-5\")\r\n#     cpu_list_decoder(\"2,5-9\")\r\n#     cpu_list_decoder(\"2-4,4-8,11\")\r\n"
